// THIS FILE IS AUTOGENERATED BY kitgen DO NOT EDIT OR CHANGES WILL BE LOST
package service

import (
	"context"
)

// Middleware describes a service middleware.
type Middleware func({{.Name}}Service) {{.Name}}Service

type implemented{{.Name}}Service struct{}

// NewImplemented{{.Name}}Service returns a naitve, stateless implementation
func NewImplemented{{.Name}}Service() {{.Name}}Service {
    return &implemented{{.Name}}Service{}
}

// New returns a {{.Name}}Service with all of the expected middleware wired in
func New(middleware []Middleware) {{.Name}}Service {
    var svc = NewImplemented{{.Name}}Service()
    for _, m := range middleware {
        svc = m(svc)
    }
    return svc
}

{{ range .Methods -}}
{{- if not .HasImplementation -}}
// {{.Name}} implements business logic
// Cut and paste this function to your service.go to implement
func (is *implemented{{$.Name}}Service) {{.Name}}({{$s := separator ", "}}{{ range $key, $value := .Parameters }}{{call $s}}{{lower $value.Name}} {{$value.Type}}{{end}}) ({{$s := separator ", "}}{{ range $key, $value := .Results }}{{call $s}}{{lower $value.Name}} {{$value.Type}}{{end}}) {
	// TODO implement the business logic of {{.Name}}
	return {{$s := separator ", "}}{{ range $key, $value := .Results }}{{call $s}}{{lower $value.Name}}{{end}}
}
{{ end }}
{{ end }}
