// THIS FILE IS AUTOGENERATED BY kitgen DO NOT EDIT OR CHANGES WILL BE LOST
package endpoint

import (
	"context"

	service "{{.RepoPath}}/{{lower .Name}}/service"
	kitendpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
{{- range .Methods}}    
	{{title .Name}}Endpoint kitendpoint.Endpoint
{{- end }}
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.{{.Name}}Service, mdw map[string][]kitendpoint.Middleware) Endpoints {
	eps := Endpoints{
{{- range .Methods}} 
		{{title .Name}}Endpoint: Make{{title .Name}}Endpoint(s),
{{- end }}
	}
{{- range .Methods}} 
	for _, m := range mdw["{{title .Name}}"] {
		eps.{{title .Name}}Endpoint = m(eps.{{title .Name}}Endpoint)
	}
{{- end }}
	return eps
}

// Failure is an interface that should be implemented by response types.
// Response encoders can check if responses are Failer, and if so they've
// failed, and if so encode them using a separate write path based on the error.
type Failure interface {
	Failed() error
}

{{range .Methods}} 
// {{.Name}}Request collects the request parameters for the {{.Name}} method.
type {{.Name}}Request struct {
{{- range .Parameters -}}{{ if not (eq .Type "context.Context")}}
    {{title .Name}} {{.Type}} `json:"{{lower .Name}}"`
{{- end -}}{{ end }}
}

// {{.Name}}Response collects the response parameters for the {{.Name}} method.
type {{.Name}}Response struct {
{{- range .Results }}
    {{title .Name}} {{.Type}} `json:"{{lower .Name}}"`
{{- end }}
}

// Make{{.Name}}Endpoint returns an endpoint that invokes {{.Name}} on the service.
func Make{{.Name}}Endpoint(s service.{{$.Name}}Service) kitendpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.({{.Name}}Request)
		{{serviceMethodResultList .}} := s.{{.Name}}({{serviceMethodInvokeArgList . "req."}})
		return {{.Name}}Response{
{{- range .Results }}
            {{title .Name}}: {{lower .Name}},
{{- end }}
		}, nil
	}
}

// Failed implements Failer.
func (r {{.Name}}Response) Failed() error {
	return r.Err
}

// {{.Name}} implements Service. Primarily useful in a client.
func (e Endpoints) {{.Name}}(ctx context.Context, s string) (rs string, err error) {
	request := {{.Name}}Request{ {{- range .Parameters -}}{{ if not (eq .Type "context.Context") }} {{title .Name}}: {{lower .Name}}, {{ end -}} {{- end -}} }
	response, err := e.{{.Name}}Endpoint(ctx, request)
	if err != nil {
		return
	}
    return {{$funcName := .Name}}{{$s := separator ", "}}{{ range $key, $value := .Results }}{{call $s}}response.({{$funcName}}Response).{{title $value.Name}}{{end}}
}
{{ end }}