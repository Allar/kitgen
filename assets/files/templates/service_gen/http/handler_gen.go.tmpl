// THIS FILE IS AUTOGENERATED BY kitgen DO NOT EDIT OR CHANGES WILL BE LOST
package http

import (
	"context"
	"encoding/json"
	"errors"
	endpoint "{{.RepoPath}}/{{lower .Name}}/endpoint"
	transporthttp "github.com/go-kit/kit/transport/http"
	nethttp "net/http"
)

// NewHTTPHandler returns a handler that makes a set of endpoints available on
// predefined paths.
func NewHTTPHandler(endpoints endpoint.Endpoints, options map[string][]transporthttp.ServerOption) nethttp.Handler {
	m := nethttp.NewServeMux()
    {{- range .Methods}}
	make{{.Name}}Handler(m, endpoints, options["{{.Name}}"])
    {{- end}}
	return m
}
func ErrorEncoder(_ context.Context, err error, w nethttp.ResponseWriter) {
	w.WriteHeader(err2code(err))
	json.NewEncoder(w).Encode(errorWrapper{Error: err.Error()})
}
func ErrorDecoder(r *nethttp.Response) error {
	var w errorWrapper
	if err := json.NewDecoder(r.Body).Decode(&w); err != nil {
		return err
	}
	return errors.New(w.Error)
}
// This is used to set the http status, see an example here :
// https://github.com/go-kit/kit/blob/master/examples/addsvc/pkg/addtransport/http.go#L133
func err2code(err error) int {
	return nethttp.StatusInternalServerError
}

type errorWrapper struct {
	Error string `json:"error"`
}
{{range .Methods}}
// HTTP Handler logic for {{.Name}}

// make{{.Name}}Handler creates the handler logic for {{.Name}}
func make{{.Name}}Handler(m *nethttp.ServeMux, endpoints endpoint.Endpoints, options []transporthttp.ServerOption) {
	m.Handle("/{{lower .Name}}", transporthttp.NewServer(endpoints.{{.Name}}Endpoint, decode{{.Name}}Request, encode{{.Name}}Response, options...))
}

// decode{{.Name}}Request is a transport/http.DecodeRequestFunc that decodes a
// JSON-encoded request from the HTTP request body.
func decode{{.Name}}Request(_ context.Context, r *nethttp.Request) (interface{}, error) {
	req := endpoint.{{.Name}}Request{}
	err := json.NewDecoder(r.Body).Decode(&req)
	return req, err
}

// encode{{.Name}}Response is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer
func encode{{.Name}}Response(ctx context.Context, w nethttp.ResponseWriter, response interface{}) (err error) {
	if f, ok := response.(endpoint.Failure); ok && f.Failed() != nil {
		ErrorEncoder(ctx, f.Failed(), w)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	err = json.NewEncoder(w).Encode(response)
	return
}
{{end -}}